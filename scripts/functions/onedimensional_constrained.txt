numberBlocks = 2
array numberFunctions[numberBlocks]
numberFunctions[1] = 3
numberFunctions[2] = 10
array blockNames[numberBlocks]
blockNames[1] = "sample"
blockNames[2] = "test"

############
## SAMPLE ##
############

array ASample[numberFunctions[1]]
array BSample[numberFunctions[1]]
array numberConstraintsSample[numberFunctions[1]]

f1Sample(x, index) = index == 0 ? sin(x) : 1/0
ASample[1] = -4.0
BSample[1] =  4.0
numberConstraintsSample[1] = 0

f2Sample(x, index) = index == 0 ? -2.0 * x + 3.0 : \
                     index == 1 ? sin(x) : 1/0
ASample[2] = 2.0
BSample[2] = 8.0
numberConstraintsSample[2] = 1

f3Sample(x, index) = index == 0 ? 5.0 * x ** 2 + 3.0 * x - 1.0 : \
                     index == 1 ? x ** 2 - 0.05 : \
                     index == 2 ? -x + 0.1 : 1/0
ASample[3] = -2.0
BSample[3] =  2.0
numberConstraintsSample[3] = 2

fSample(i, x, index) = i == 1 ? f1Sample(x, index) : \
                       i == 2 ? f2Sample(x, index) : \
                       i == 3 ? f3Sample(x, index) : 1/0

##########
## TEST ##
##########

array ATest[numberFunctions[2]]
array BTest[numberFunctions[2]]
array numberConstraintsTest[numberFunctions[2]]

f1Test(x, index) = index == 0 ? -13.0 / 6.0 * x + sin(13.0 / 4.0 * (2.0 * x + 5.0)) - 53.0 / 12.0 : \
                   index == 1 ? exp(-sin(3.0 * x)) - 1.0 / 10.0 * (x - 1.0 / 2.0) ** 2 - 1.0 : 1/0
ATest[1] = -2.5
BTest[1] =  1.5
numberConstraintsTest[1] = 1

f2Test(x, index) = index == 0 ? (11.0 * x * x - 10.0 * x + 21.0) / (2.0 * (x * x + 1)) : \
                   index == 1 ? 1.0 / 20.0 - exp(-2.0 / 5.0 * (x + 5.0)) * sin(4.0 / 5.0 * pi * (x + 5.0)) : 1/0
ATest[2] = -5.0
BTest[2] =  5.0
numberConstraintsTest[2] = 1

f3Test(x, index) = index == 0 ? -sum[j = 1 : 5] cos(j * x) : \
                   index == 1 ? 3.0 / 2.0 * (cos(7.0 / 20.0 * (x + 10.0)) - sin(7.0 / 4.0 * (x + 10.0)) + 1.0 / 2.0) : 1/0
ATest[3] = -10.0
BTest[3] =  10.0
numberConstraintsTest[3] = 1

f4Test_a(x) = pi / 2.0 * x + 1.0 / 10.0
f4Test(x, index) = index == 0 ? 4.0 * sin(f4Test_a(x) / 2.0) * (sin(f4Test_a(x)) ** 3 + cos(f4Test_a(x)) ** 3) ** 2 : \
                   index == 1 ? 6.0 / 25.0 - sum[j = 1 : 5] cos(5.0 / 4.0 * (j + 1.0) * x + j) : \
                   index == 2 ? 9.0 / 50.0 - 9.0 / 2.0 * exp(-(x - 1.0 / 10.0)) * sin(2.0 * pi * (x - 1.0 / 10.0)) : 1/0
ATest[4] = 0.0
BTest[4] = 4.0
numberConstraintsTest[4] = 2

f5Test(x, index) = index == 0 ? sin(0.423531 * x + 3.13531) + sin(10.0 / 3.0 * (0.423531 * x + 3.13531)) + \
                                log(0.423531 * x + 3.13531) + 0.36634 - 0.355766 * x : \
                   index == 1 ? 17.0 / 25.0 - 2.0 / 29763.233 * (-1.0 / 6.0 * x ** 6 + 52.0 / 25.0 * x ** 5 - 39.0 / 80.0 * x ** 4 - \
                                71.0 / 10.0 * x ** 3 + 79.0 / 20.0 * x ** 2 + x - 1.0 / 10.0) : \
                   index == 2 ? -14.0 / 125.0 * (3.0 * x - 8.0) * sin(252.0 / 125.0 * (x + 3.0 / 2.0)) - 1.0 / 2.0 : 1/0
ATest[5] = -1.5
BTest[5] = 11.0
numberConstraintsTest[5] = 2

f6Test(x, index) = index == 0 ? -7.0 / 40.0 * (3.0 * x + 4.0) * sin(63.0 / 20.0 * (x + 4.0)) : \
                   index == 1 ? 40.0 * (cos(4.0 * x) * (x - sin(x)) * exp(-(x * x) / 2.0)) : \
                   index == 2 ? 2.0 / 25.0 * (x + 4.0) - sin(12.0 / 5.0 * (x + 4.0)) : 1/0
ATest[6] = -4.0
BTest[6] =  4.0
numberConstraintsTest[6] = 2

f7Test(x, index) = index == 0 ? exp(-cos(4.0 * x - 3.0)) + 1.0 / 250.0 * (4.0 * x - 3.0) ** 2 - 1.0 : \
                   index == 1 ? sin(x) ** 3 * exp(-sin(3.0 * x)) + 1.0 / 2.0 : \
                   index == 2 ? cos(7.0 / 5.0 * (x + 3.0)) - sin(7.0 * (x + 3.0)) + 3.0 / 10.0 : 1/0
ATest[7] = -3.0
BTest[7] =  2.0
numberConstraintsTest[7] = 2

f8Test(x, index) = index == 0 ? cos(7.0 / 4.0 * x + 241.0 / 40.0) - sin(35.0 / 4.0 * x + 241.0 / 8.0) - 5.0 : \
                   index == 1 ? exp(-sin(4.0 * x)) - 1.0 / 10.0 * (x - 1.0 / 2.0) ** 2 - 1.0 : \
                   index == 2 ? 3.0 / 10.0 - sum[j = 1 : 5] cos(5.0 * (j + 1.0) * (x + 1.0 / 2.0)) : \
                   index == 3 ? (-21.0 / 20.0 * x - 13.0 / 8.0) * sin(63.0 / 10.0 * x + 63.0 / 4.0) + 1.0 / 5.0 : 1/0
ATest[8] = -2.5
BTest[8] =  1.5
numberConstraintsTest[8] = 3

f9Test(x, index) = index == 0 ? sum[j = 1:5] 1.0 / 5.0 * sin((j + 1.0) * x - 1.0) + 2.0 : \
                   index == 1 ? 1.0 / 40.0 * (x - 4.0) * (x - 32.0 / 5.0) * (x - 9.0) * (x - 11.0) * \
                                exp(-1.0 / 10.0 * (x - 13.0 / 2.0) ** 2) : \
                   index == 2 ? (sin(x + 1.0) ** 3 + cos(x + 1.0) ** 3) * exp(-(x + 1.0) / 10.0) : \
                   index == 3 ? exp(-cos(3.0 / 5.0 * (x - 5.0 / 2.0))) + 1.0 / 10.0 * (3.0 / 25.0 * x - 4.0 / 5.0) ** 2 - 1.0 : 1/0
ATest[9] =  0.0
BTest[9] = 14.0
numberConstraintsTest[9] = 3

f10Test_a(x) = 2.0 / pi * x - 1.0 / 2.0
f10Test_b(x) = 4.0 / pi * (x - 3.0 / 10.0) - 4.0
f10Test(x, index) = index == 0 ? -1.0 / 500.0 * f10Test_b(x) ** 6 + 3.0 / 100.0 * f10Test_b(x) ** 4 - \
                                 27.0 / 500.0 * f10Test_b(x) ** 2 + 3.0 / 2.0 : \
                    index == 1 ? 2.0 * exp(-2.0 / pi * x) * sin(4.0 * x) : \
                    index == 2 ? -f10Test_a(x) ** 2 * (-f10Test_a(x) ** 2 + 5.0 * f10Test_a(x) - 6.0) / \
                                 (f10Test_a(x) ** 2 + 1.0) - 1.0 / 2.0 : \
                    index == 3 ? sin(x) ** 3 + cos(2.0 * x) ** 3 - 3.0 / 10.0 : 1/0
ATest[10] =  0.0
BTest[10] = 2 * pi
numberConstraintsTest[10] = 3

fTest(i, x, index) = i == 1 ? f1Test(x, index) : \
                     i == 2 ? f2Test(x, index) : \
                     i == 3 ? f3Test(x, index) : \
                     i == 4 ? f4Test(x, index) : \
                     i == 5 ? f5Test(x, index) : \
                     i == 6 ? f6Test(x, index) : \
                     i == 7 ? f7Test(x, index) : \
                     i == 8 ? f8Test(x, index) : \
                     i == 9 ? f9Test(x, index) : \
                     i == 10 ? f10Test(x, index) : 1/0


f(i, j, x, index) = i == 1 ? fSample(j, x, index) : \
                    i == 2 ? fTest(j, x, index) : 1/0
A(i, j) = i == 1 ? ASample[j] : \
          i == 2 ? ATest[j] : 1/0
B(i, j) = i == 1 ? BSample[j] : \
          i == 2 ? BTest[j] : 1/0
numberConstraints(i, j) = i == 1 ? numberConstraintsSample[j] : \
                          i == 2 ? numberConstraintsTest[j] : 1/0
